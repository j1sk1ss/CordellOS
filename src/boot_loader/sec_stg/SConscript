import os

from SCons.Environment import Environment
from build_scripts.utility import glob_recursive, find_index, is_file_name

Import('TARGET_ENVIRONMENT')
TARGET_ENVIRONMENT: Environment

env = TARGET_ENVIRONMENT.Clone()
env.Append(
    LINKFLAGS = [
        '-Wl,-T', env.File('linker.ld').srcnode().path,
        '-Wl,-Map=' + env.File('sec_stg.map').path
    ],

    CPPPATH = [ 
        env.Dir('.').srcnode(),
        env['PROJECTDIR'].Dir('src/libs')
    ],

    ASFLAGS = [ 
        '-I', env.Dir('.').srcnode(),
    ]
)

sources = glob_recursive(env, '*.c') + \
          glob_recursive(env, '*.cpp') + \
          glob_recursive(env, '*.asm')

headers = glob_recursive(env, '*.h') + \
          glob_recursive(env, '*.hpp') + \
          glob_recursive(env, '*.inc')


objects = env.Object(sources)

obj_crti = objects.pop(find_index(objects, lambda item: is_file_name(item, 'crti.o')))
obj_crtn = objects.pop(find_index(objects, lambda item: is_file_name(item, 'crtn.o')))

Import('libcore')

static_libs = [
    libcore
]

objects = [
    obj_crti,
    os.path.join(env["TOOLCHAIN_LIBGCC"], 'crtbegin.o'),
    *objects,
    *static_libs,
    os.path.join(env["TOOLCHAIN_LIBGCC"], 'crtend.o'),
    obj_crtn
]

sec_stg = env.Program('sec_stg.elf', objects)
env.Depends(sec_stg, headers)

Export('sec_stg')